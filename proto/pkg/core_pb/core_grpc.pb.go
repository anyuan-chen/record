// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: core.proto

package core_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CoreManagerClient is the client API for CoreManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoreManagerClient interface {
	GetTopArtists(ctx context.Context, in *NumberWithToken, opts ...grpc.CallOption) (*JSONResponse, error)
	GetTopSongs(ctx context.Context, in *NumberWithToken, opts ...grpc.CallOption) (*JSONResponse, error)
	GetTopGenres(ctx context.Context, in *Token, opts ...grpc.CallOption) (*JSONResponse, error)
	GetRecommendedSongs(ctx context.Context, in *NumberWithToken, opts ...grpc.CallOption) (*JSONResponse, error)
	MakeRecommendedPlaylist(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Empty, error)
	GetPopularityScore(ctx context.Context, in *Token, opts ...grpc.CallOption) (*FloatScore, error)
}

type coreManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewCoreManagerClient(cc grpc.ClientConnInterface) CoreManagerClient {
	return &coreManagerClient{cc}
}

func (c *coreManagerClient) GetTopArtists(ctx context.Context, in *NumberWithToken, opts ...grpc.CallOption) (*JSONResponse, error) {
	out := new(JSONResponse)
	err := c.cc.Invoke(ctx, "/proto.CoreManager/GetTopArtists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreManagerClient) GetTopSongs(ctx context.Context, in *NumberWithToken, opts ...grpc.CallOption) (*JSONResponse, error) {
	out := new(JSONResponse)
	err := c.cc.Invoke(ctx, "/proto.CoreManager/GetTopSongs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreManagerClient) GetTopGenres(ctx context.Context, in *Token, opts ...grpc.CallOption) (*JSONResponse, error) {
	out := new(JSONResponse)
	err := c.cc.Invoke(ctx, "/proto.CoreManager/GetTopGenres", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreManagerClient) GetRecommendedSongs(ctx context.Context, in *NumberWithToken, opts ...grpc.CallOption) (*JSONResponse, error) {
	out := new(JSONResponse)
	err := c.cc.Invoke(ctx, "/proto.CoreManager/GetRecommendedSongs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreManagerClient) MakeRecommendedPlaylist(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto.CoreManager/MakeRecommendedPlaylist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreManagerClient) GetPopularityScore(ctx context.Context, in *Token, opts ...grpc.CallOption) (*FloatScore, error) {
	out := new(FloatScore)
	err := c.cc.Invoke(ctx, "/proto.CoreManager/GetPopularityScore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoreManagerServer is the server API for CoreManager service.
// All implementations must embed UnimplementedCoreManagerServer
// for forward compatibility
type CoreManagerServer interface {
	GetTopArtists(context.Context, *NumberWithToken) (*JSONResponse, error)
	GetTopSongs(context.Context, *NumberWithToken) (*JSONResponse, error)
	GetTopGenres(context.Context, *Token) (*JSONResponse, error)
	GetRecommendedSongs(context.Context, *NumberWithToken) (*JSONResponse, error)
	MakeRecommendedPlaylist(context.Context, *Token) (*Empty, error)
	GetPopularityScore(context.Context, *Token) (*FloatScore, error)
	mustEmbedUnimplementedCoreManagerServer()
}

// UnimplementedCoreManagerServer must be embedded to have forward compatible implementations.
type UnimplementedCoreManagerServer struct {
}

func (UnimplementedCoreManagerServer) GetTopArtists(context.Context, *NumberWithToken) (*JSONResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopArtists not implemented")
}
func (UnimplementedCoreManagerServer) GetTopSongs(context.Context, *NumberWithToken) (*JSONResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopSongs not implemented")
}
func (UnimplementedCoreManagerServer) GetTopGenres(context.Context, *Token) (*JSONResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopGenres not implemented")
}
func (UnimplementedCoreManagerServer) GetRecommendedSongs(context.Context, *NumberWithToken) (*JSONResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecommendedSongs not implemented")
}
func (UnimplementedCoreManagerServer) MakeRecommendedPlaylist(context.Context, *Token) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeRecommendedPlaylist not implemented")
}
func (UnimplementedCoreManagerServer) GetPopularityScore(context.Context, *Token) (*FloatScore, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPopularityScore not implemented")
}
func (UnimplementedCoreManagerServer) mustEmbedUnimplementedCoreManagerServer() {}

// UnsafeCoreManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoreManagerServer will
// result in compilation errors.
type UnsafeCoreManagerServer interface {
	mustEmbedUnimplementedCoreManagerServer()
}

func RegisterCoreManagerServer(s grpc.ServiceRegistrar, srv CoreManagerServer) {
	s.RegisterService(&CoreManager_ServiceDesc, srv)
}

func _CoreManager_GetTopArtists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumberWithToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreManagerServer).GetTopArtists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CoreManager/GetTopArtists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreManagerServer).GetTopArtists(ctx, req.(*NumberWithToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreManager_GetTopSongs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumberWithToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreManagerServer).GetTopSongs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CoreManager/GetTopSongs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreManagerServer).GetTopSongs(ctx, req.(*NumberWithToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreManager_GetTopGenres_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreManagerServer).GetTopGenres(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CoreManager/GetTopGenres",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreManagerServer).GetTopGenres(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreManager_GetRecommendedSongs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumberWithToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreManagerServer).GetRecommendedSongs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CoreManager/GetRecommendedSongs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreManagerServer).GetRecommendedSongs(ctx, req.(*NumberWithToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreManager_MakeRecommendedPlaylist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreManagerServer).MakeRecommendedPlaylist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CoreManager/MakeRecommendedPlaylist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreManagerServer).MakeRecommendedPlaylist(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreManager_GetPopularityScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreManagerServer).GetPopularityScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CoreManager/GetPopularityScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreManagerServer).GetPopularityScore(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

// CoreManager_ServiceDesc is the grpc.ServiceDesc for CoreManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CoreManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.CoreManager",
	HandlerType: (*CoreManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTopArtists",
			Handler:    _CoreManager_GetTopArtists_Handler,
		},
		{
			MethodName: "GetTopSongs",
			Handler:    _CoreManager_GetTopSongs_Handler,
		},
		{
			MethodName: "GetTopGenres",
			Handler:    _CoreManager_GetTopGenres_Handler,
		},
		{
			MethodName: "GetRecommendedSongs",
			Handler:    _CoreManager_GetRecommendedSongs_Handler,
		},
		{
			MethodName: "MakeRecommendedPlaylist",
			Handler:    _CoreManager_MakeRecommendedPlaylist_Handler,
		},
		{
			MethodName: "GetPopularityScore",
			Handler:    _CoreManager_GetPopularityScore_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "core.proto",
}
